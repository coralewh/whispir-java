/*
 * Based on the example at Chris Banes's repository that allows signing
 * without manually creating a maven file.
 *
 * The original can be found at
 * https://raw.github.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle
 */

apply plugin: 'java'
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "io.codearte.nexus-staging"

 // taken from https://github.com/stripe/stripe-java/blob/master/deploy.gradle
def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty("RELEASE_REPOSITORY_URL") ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty("SNAPSHOT_REPOSITORY_URL") ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty("NEXUS_USERNAME") ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty("NEXUS_PASSWORD") ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    tasks.withType(Sign) {
        onlyIf { isReleaseBuild() && project.hasProperty("signing.gnupg.keyName") }
    }

    //  https://central.sonatype.org/publish/publish-gradle/#deployment
    task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // https://central.sonatype.org/publish/publish-gradle/#signing-artifacts
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
        useGpgCmd()
        sign publishing.publications
    }

    nexusStaging {
        packageGroup = GROUP
        numberOfRetries = 40
        delayBetweenRetriesInMillis = 4000
        username = getRepositoryUsername()
        password = getRepositoryPassword()
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    packaging = POM_PACKAGING
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = "whispirsupport"
                            name = "Whispir Support"
                            email = "support@whispir.com"
                        }
                    }
                    organization {
                        name = POM_DEVELOPER_NAME
                        url = POM_ORGANIZATION_URL
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
        repositories {
            maven {
                name = "nexus"
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }
}